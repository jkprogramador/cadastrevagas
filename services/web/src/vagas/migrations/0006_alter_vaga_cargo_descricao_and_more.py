# Generated by Django 4.0.2 on 2022-02-28 13:12

import django.core.validators
from django.db import migrations, models
import vagas.models


class Migration(migrations.Migration):

    dependencies = [
        ('vagas', '0005_alter_vaga_cargo_descricao_alter_vaga_cargo_titulo_and_more'),
    ]

    operations = [
        migrations.AlterField(
            model_name='vaga',
            name='cargo_descricao',
            field=models.TextField(blank=True),
        ),
        migrations.AlterField(
            model_name='vaga',
            name='data_hora_entrevista',
            field=models.DateTimeField(blank=True, error_messages={'invalid_datetime': 'O campo Data e horário da entrevista deve conter uma data e horário válidos. Ex.: dia/mês/ano horas:minutos'}, null=True),
        ),
        migrations.AlterField(
            model_name='vaga',
            name='empresa_email',
            field=models.EmailField(blank=True, error_messages={'invalid': 'O campo Email da empresa deve conter um email válido.'}, max_length=254),
        ),
        migrations.AlterField(
            model_name='vaga',
            name='empresa_endereco',
            field=models.CharField(blank=True, error_messages={'max_length': 'O campo Endereço da empresa pode conter no máximo %(limit_value)s caracteres.'}, max_length=200),
        ),
        migrations.AlterField(
            model_name='vaga',
            name='empresa_telefone_celular',
            field=vagas.models.TelefoneField(blank=True, max_length=15, validators=[django.core.validators.RegexValidator(code='invalid', message='O campo Telefone celular da empresa deve conter um número válido. Ex.: (DDD) 99999-9999', regex='^\\(\\d{2}\\) 9\\d{4}-\\d{4}$')]),
        ),
        migrations.AlterField(
            model_name='vaga',
            name='empresa_telefone_comercial',
            field=vagas.models.TelefoneField(blank=True, max_length=14, validators=[django.core.validators.RegexValidator(code='invalid', message='O campo Telefone comercial da empresa deve conter um número válido. Ex.: (DDD) 9999-9999', regex='^\\(\\d{2}\\) \\d{4}-\\d{4}$')]),
        ),
    ]
